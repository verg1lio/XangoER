import math
import numpy as np
import matplotlib.pyplot as plt

def calcular_k(h, r, espessura, densidade, calor_especifico):

    # Cálculo da área do disco
    area = 2 * math.pi * r * espessura + math.pi * r**2

    # Cálculo do volume do disco
    volume = math.pi * r**2 * espessura

    # Cálculo da massa do disco
    massa = densidade * volume

    # Cálculo da constante k
    k = (h * area) / (massa * calor_especifico)

    return k

# Dicionário contendo as propriedades dos materiais
materiais = {
    'Ferro Fundido Cinzento': {'densidade': 7250, 'calor_especifico': 460.24, 'condutividade_termica': 48},
    'Aço Inoxidável': {'densidade': 7900, 'calor_especifico': 500, 'condutividade_termica': 18.75},
    'Aço 1045': {'densidade': 7870, 'calor_especifico': 486, 'condutividade_termica': 51.9}
}

# Parâmetros do veículo e do disco de freio
massa_veiculo = 285  # kg
velocidade_inicial = 32 * 1000 / 3600  # Convertendo de km/h para m/s (32 km/h)
diametro_disco = 0.2  # m
espessura_disco = 0.004  # m
h = 30  # Coeficiente de transferência de calor (W/m²·K)

# Selecionando o material (por exemplo, Aço Inoxidável)
material = materiais['Aço Inoxidável']
densidade = material['densidade']
calor_especifico = material['calor_especifico']

# Definir o raio do disco
r = diametro_disco / 2

# Calcular k com o raio corretamente definido
k = calcular_k(h, r, espessura_disco, densidade, calor_especifico)

print(f"A constante de resfriamento k é: {k:.5f} s⁻¹")

# Cálculo da energia gerada pela frenagem
energia_frenagem = (massa_veiculo * velocidade_inicial**2) / 2  # Nm

# Cálculo da potência média gerada na frenagem
aceleracao = 9.81  # m/s² (considerando desaceleração constante)
tempo_frenagem = velocidade_inicial / aceleracao
tempo = np.linspace(0, tempo_frenagem, 100)
potencia_frenagem = (massa_veiculo * aceleracao * velocidade_inicial) * (1 - (tempo / tempo_frenagem))

# Cálculo do fluxo de calor inicial no disco
area_varrida = math.pi * (diametro_disco / 2)**2
fluxo_calor_inicial = potencia_frenagem[0] / area_varrida  # Nm/h/m²

# Cálculo do ganho de temperatura para cada material em sucessivas frenagens
numero_frenagens = np.arange(1, 3000)  # Número de frenagens para o gráfico

# Dicionário para armazenar o ganho de temperatura de cada material
ganho_temperatura = {}

plt.figure(figsize=(12, 8))
for material, propriedades in materiais.items():
    densidade = propriedades['densidade']
    calor_especifico = propriedades['calor_especifico']
    delta_temperatura = (fluxo_calor_inicial * tempo_frenagem) / (densidade * calor_especifico * (area_varrida * espessura_disco))

    # Calculando a temperatura sucessivas em graus Celsius
    temperatura_sucessivas = [
        (1 - np.exp(-n * k)) * delta_temperatura
        for n in numero_frenagens
    ]

    ganho_temperatura[material] = temperatura_sucessivas  # Armazenando os ganhos de temperatura por material

    plt.plot(numero_frenagens, temperatura_sucessivas, label=material, marker='o', markersize=3)  # Adicionando bolinhas

# Configuração do gráfico
plt.xlabel("Número de Frenagens")
plt.ylabel("Ganho de Temperatura (°C)")
plt.title("Ganho de Temperatura x Número de Frenagens")
plt.legend()
plt.grid(True)
plt.show()

# Cálculo do resfriamento com a Lei de Resfriamento de Newton
temperaturas_resfriamento = []
temperatura_ambiente = 25  # Temperatura ambiente em graus Celsius

# Simulação do resfriamento para cada material
tempos_resfriamento = np.linspace(0, 3600, 1000)  # 1 hora em segundos
for material in materiais.keys():
    temperatura_maxima = ganho_temperatura[material][-1] + temperatura_ambiente  # Máxima em Celsius
    temperatura_resfriamento = [
        temperatura_ambiente + (temperatura_maxima - temperatura_ambiente) * np.exp(-k * t)  # Lei de resfriamento em Celsius
        for t in tempos_resfriamento
    ]
    temperaturas_resfriamento.append(temperatura_resfriamento)

# Gráfico de resfriamento
plt.figure(figsize=(12, 8))
for idx, (material, temp_resfriamento) in enumerate(zip(materiais.keys(), temperaturas_resfriamento)):
    plt.plot(tempos_resfriamento, temp_resfriamento, label=f'Resfriamento {material}', marker='x', markersize=3)

# Configuração do gráfico de resfriamento
plt.xlabel("Tempo (s)")
plt.ylabel("Temperatura (°C)")
plt.title("Resfriamento do Disco de Freio ao Longo do Tempo")
plt.legend()
plt.grid(True)
plt.show()
